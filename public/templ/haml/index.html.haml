!!!
%html( lang="en" )
  %head
    %meta( charset="UTF-8" )
    %meta( name="viewport" content="width=device-width, initial-scale=1.0" )
    %title ; ) Interrupt Software

    %link( rel="stylesheet" href="/include/vendor/bootstrap/css/bootstrap.min.css" )
    %link( rel="stylesheet" href="/include/vendor/bootstrap/css/bootstrap-responsive.min.css" )
    %link( rel="stylesheet" href="/include/vendor/Metro-UI-CSS/css/modern.css" )
    %link( rel="stylesheet" href="/include/css/index.css" )
  
    %script( type="text/javascript" src="/include/vendor/jquery-2.0.0.min.js" )
    %script( type="text/javascript" src="/include/vendor/bootstrap/js/bootstrap.min.js")
    %script( type="text/javascript" src="/include/vendor/jquery.serialScroll.js")
    %script( type="text/javascript" src="/include/vendor/jquery.scrollTo.js")
    %script( type="text/javascript" src="/include/vendor/jquery.easing.min.js")
    %script( type="text/javascript" src="/include/vendor/jquery.color-2.1.2.min.js")

  %body

    /.header
    /  .header-content
    /    .header-content-entry.secondary-title#bkeeping-entry
    /      bkeeping
    /    .header-content-entry.secondary-title#cloudeditor-entry
    /      cloudeditor
    .slider
      .slide-stretchable
        .slide-wrapper#wrapper-home
          .slide-container#slide-home
            .slide-left-overhang
              ; )
            .slide-container-content
              %h1.primary-title
                Interrupt Software
              %h3.secondary-title
                Custom Software Development &#x2F; Advanced Functionality &amp; Design Excellence

              %h4.slide-content
                %p
                  Tim is a gifted developer - thoughtful, strategic, and careful. We hired him to develop the StoryDesk CloudEditor. He delivered a beautiful, one-of-a-kind HTML5 content management system for iPad. I offer Tim my highest recommendation, as a colleague and a friend.
                .colleague
                  Jordan Stolper, CEO, StoryDesk.com

                %p
                  Tim is a strong Ruby and Rails developer, whom I worked with as a SCRUM Master on an operational data transformation and data store project. Tim was both proactive and balanced in his solutions from a business and technical standpoint, articulate, and was very effective in pair programming scenarios with different developers on the team. His attention to detail, adaptability and willingness to take on new challenges is further enhanced with his positive attitude. I would welcome working with Tim again and recommend him as a strong asset to any organization.
                .colleague
                  Cort Fowler, Product Manager and Business Analyst, Rogers Digital Media

                %p
                  Tim is one of the most intelligent, forward-thinking developers I've ever worked with. He possesses a deep pool of knowledge about all things related to software and uses that to engineer top-notch solutions. The diversity he's gained from experience with so many different languages and technologies gives him great perspective on technical approaches and strategies. He is also one of the most enthusiastic and proactive colleagues I've ever had the chance to work with, and I'm sure that he's up to any challenge that comes his way.
                .colleague
                  Stephen Kawaguchi, Engineer , Bank Of Montreal, IFL


        .slide-wrapper#wrapper-blog
          .slide-container#slide-blog
            .slide-container-content
              %h1.primary-title
                Blog

              %h2.secondary-title
                A Developer's Toolbox (Rich Internet Applications)

              %h3.secondary-title
                Overview

              %h5.slide-content
                %p
                  I'm often asked what are the best tools and technology stack for building a Web Application. For the purposes of this article, I'll focus on more advanced front-end representations - what are known as Rich Internet Applications (RIA(s)). I think it's useful to step back and consider the purpose and conceptions of Rich Internet Applications (RIA, synonymous with Single-Page Applications (SPA)). We can start by thinking back to when most applications were on the desktop. As the internet grew in popularity, Javascript was introduced into browsers (and Flash). Web pages grew in sophistication, as to begin to resemble full desktop apps. Now, we have things like Google docs, which are basically our old desktop apps extruded onto the web. I mention all of this in order to get us thinking about how we should be treating these new web apps. Ie, we should be treating these web apps like full applications. And with that, my opinion is that, to the highest degree possible, we should let a webapps do its own rendering, state changes, business logic, etc. It's a much cleaner design to i) pass raw HTML template chunks and ii) JSON data from RESTful services. The web app will have enough intelligence to take these, and generate a web view, UI functions, state transitions between the UI, etc. I advocate these principles to enforce a clean separation of concerns. It future-proofs the app, and allows for easily scaling machine resources, or adding new functionality. 

                %p
                  With this in mind, as an example, let's consider three MVC Web Frameworks - <a href="http://emberjs.com/">Ember</a>, <a href="http://angularjs.org/">Angular</a>, and <a href="http://backbonejs.org/">Backbone</a>. We'll take a semantic comparison between these libraries, and more, why a certain library would benefit us from a production, cost, time, future planning standpoint. So you can properly judge my position, I'll state from the beginning, my opinion that Backbone is usually the best tool for a front-end MVC solution. My experience is that it optimizes i) developer time (ie. speed to market), ii) production efficiency (it's very lightweight), iii) scalability, and iv) future flexibility. To begin, I present a useful <a href="http://blog.susestudio.com/2013/03/client-side-js-mv-framework-roundup.html">Client-side JS MV* Framework Roundup</a>. It gives a nod to the <a href="http://todomvc.com/">TodoMVC</a> project. TodoMVC implements a simple todo app in all the web MVC frameworks. It's meant to help you select the best one for your needs. 

                %p
                  Like Rails, Ember is meant to be an opinionated framework, using common idioms. Views are handled via 2-way binding against rendered moustache templates. Angular is meant to be a way of declaring dynamic views in web-applications. It does this by letting you extend HTML vocabulary for your application. Angular also defines its own set of attributes and markup, which are processed by its JS library to provide browser-specific behaviour. Backbone is intended to be a lightweight and focused way of building single-page applications (or RIAs). It gives structure to web applications by providing models with key-value binding and custom events, collections, views with declarative event handling, etc. It connects it all to an existing API over a RESTful JSON interface. 

                %p
                  With the above, I'll begin with my preference to eschew the moustache approach to templates, used by Ember. It tangles together the raw HTML template chunks, with transformation logic. And it unnecessarily forces web designers to know Javascript or some other logical transformation language, reducing developer efficiency. There are better, more declarative path-based solutions, like PureJS. Ember also implements rendering logic on the server. This tangles together application functions, reducing future flexibility and scalability. The tangling I described earlier is also why I eschew Angular. 

                %p
                  Now, broadly listing a technology stack, will not address enough cases. Below, I'll outline three scenarios, or types of web applications, and an appropriate technology stack baseline. With each set of choices, I'll explain the tool and the rationale behind that choice. But I also want to step back again, and take a more holistic approach to my solutions. Before the Scenario Breakdown, I'll describe my approaches to i) Project Management, ii) thoughts on Pair Programming, and iii) a good approach for Testing and Test Automation. 

              %h3.secondary-title
                Project Management

              %h5.slide-content
                %p

              %h3.secondary-title
                Thoughts On Pair Programming

              %h5.slide-content
                %p

              %h3.secondary-title
                Testing and Test Automation Solutions 

              %h5.slide-content
                %p

              %h3.secondary-title
                Scenario Breakdown

              %h5.slide-content
                %p

              %h3.secondary-title
                Scenario A)

              %h5.slide-content
                %p This is a Rich Internet Application (akin to Pixelthrone), solely as a web tool, communicating with 3rd party cloud services. It will be a responsive front-end that is capable on smart phones, tablets, and varied screen sizes. 

                %ul HAML / SCSS / Coffeescript / PureJS - Haml, Scss and Coffeescript compile down to html, css and javascript, respectively. They're higher level syntaxes that let developers write equivalent output code, in a much shorter amount of time. The added benefits greatly outweigh the added abstraction. PureJS is a lightweight templating tool, that eschews the moustache templating approach. My opinion is that the moustache approach, incorrectly tangles together document structure and logic in the same place. PureJS, instead uses path-like expressions for data locations.
                %ul Backbone - Backbone has a focused and elegant approach to rendering choices. It also has a clean and lightweight approach to managing the internal state of the application (model and controller). And the RESTful server communication is also very consistent and well thought out. In short, these design advantages are what help optimize development and production costs, time, and future planning.
                %ul Bootstrap - Bootstrap is an excellent front end framework with which many developers already have a strong knowledge level. However, there are advantages and disadvantages of this option, and some alternatives. 

                %p Advantages
                %ul 
                  %li Every HTML element that could potentially be used is accounted for. Meaning even rare tags, like <dl> , will be elegantly styled and positioned.
                  %li It lays a foundation for consistency that would take a good amount of time to achieve manually. Further, when a developer passes off the deliverable to the client, others will be able to 'extend' the original work without disturbing the general aesthetic.
                  %li It's facility for rapid prototyping, and again, most team's familiarity, means it would be quick to use and efficient.

                %p Disadvantages
                %ul 
                  %li Suboptimal for creating a performance driven web app
                  %li The framework can become too heavy, because so many things (html elements, etc) are included. It can be tough to quickly find what you're looking for. Additionally, troubleshooting unexpected margins and borders and whatnot can be difficult. 
                  %li It's not bespoke, or tending toward a higher quality brand. It is a generic solution that a lot of startups use. 
                  %li Customizing such a pervasive framework can be very tricky. Changing one thing might mean unintended effects on other elements.

                %p Alternatives 
                %ul 
                  %li Foundation is a responsive front-end framework. It let's developers quickly prototype and build sites or apps that work on any kind of device. 
                  %li HTML5 Boilerplate is a professional front-end template for building adaptable web apps or sites. It does not impose a specific development framework, freeing the developer to manipulate the code to their needs.


              %h3.secondary-title
                Scenario B)

              %h5.slide-content
                %p
                  A basic, SQL-backed webapp; simple set of functions, moderate usage, and Junior Sys Admins maintaining. 
                %ul
                  %li HAML / SCSS / Coffeescript / PureJS - Haml, Scss and Coffeescript compile down to html, css and javascript, respectively. They're higher level syntaxes that let developers write equivalent output code, in a much shorter amount of time. The added benefits greatly outweigh the added abstraction. PureJS is a lightweight templating tool, that eschews the moustache templating approach (see here). I'll reiterate my opinion that the moustache approach, incorrectly tangles together document structure and logic in the same place. PureJS, instead uses path-like expressions for data locations.
                  %li Ruby / Rails / JSON data exchange - Ruby is an excellent dynamic, object-oriented language. It has language features (first-class-functions, simple syntax design, etc) that let programmers quickly build out capable, general-purpose solutions. Sinatra is good for simple webapps. However Rails gives i) better support for REST endpoints ii) more compatible libraries and iii) easier setup and migration of SQL database schemas and data. There's a good set of Rails / Sinatra tradeoffs here. And JSON is a well-known and supported data exchange format, especially for RESTful, AJAX calls 
                  %ul
                    %li not Sinatra - see Rails / Sinatra tradeoffs here
                  %li PostgreSQL - The app data is rectangular and related. That makes SQL technology a good fit. schema and queries will be well-known before hand, meaning they won't require a lot of mutation after delivery. Postgres is a reliable, stable, and well-known RDBMS. It is open source, and has a license that's suitable for commercial purposes (see here).

              %h3.secondary-title
                Scenario C)

              %h5.slide-content
                %p
                  A complex, stateful UI, backed by several "big data" stores. Client wants to capture and analyse a constant stream of financial data. Researchers will take this data and need to create and deploy new algorithms and analytics on top of the data. This means real-time analytics, on a constant stream of data; high usage by very senior quantitative analysts and data scientists; maintained by Senior IT Personnel. 
                %ul

                  %li HAML / SCSS - Haml and Scss compile down to html and css, respectively. They're higher level syntaxes that let developers write equivalent output code, in a much shorter amount of time. The added benefits greatly outweigh the added abstraction. 

                  %li Coffeescript / PureJS / RequireJS / BackboneJS - Coffeescript compiles down to Javascript. It provides greater expressive power over javascript, using less code. The added benefits greatly outweigh the added abstraction. PureJS is a lightweight templating tool, that eschews the moustache templating approach (see here). I'll reiterate my opinion that the moustache approach, incorrectly tangles together document structure and logic in the same place. PureJS, instead uses path-like expressions for data locations. RequireJS is a very good tool for building component systems necessary in a large, complex thick-client. BackboneJS is a lightweight, well-thought out MVC tool for managing in-browser app state. 
                  %ul
                    %li 
                      Thing
                  %ul
                    %li almost Clojurescript, Enfocus, Functional Reactive Programming - These technologies would be a much better fit than the abouve, for the kind of real-time sensitive interactions in the app. Clojurescript especially, is ideal for computationally intensive, interactive applications (see here). However maintenance ability and cost is high. I would recommend this over RequireJS and BackboneJS if you have very good IT specialists as maintainers. Enfocus is a templating tool for Clojurescript. Like PureJS, it uses path-like expressions for data locations. Functional Reactive Programming (FRP) is an approach that uses Functional programming techniques to operate on data structures over time. Ideally, we'll want an FRP library that lets us more cleanly transform, compose, and query streams of data (mouse moves, stock streams, etc). 
                    %li ◦ not Websockets - There's more standard HTTP Server Sent Events (EventSource API) 
                  %li Clojure / Pedestal (for SSE support)  / Storm / JSON data exchange - Clojure provides a number of language features (first-class functions, homoiconic, immutable data, etc) that make it ideal for building complex, data intensive apps. Pedestal is a tool set for building web applications in Clojure. For this app, it has a number of useful features, such as built in SSE support. Storm is a distributed realtime computation system. It provides a set of utilities for doing realtime computation. I chose it over Hadoop, as Storm is used for real time processing while Hadoop is used for batch processing. JSON is a well-known and supported data exchange format, especially for RESTful, AJAX calls. 
                  %ul
                    %li almost EDN - would be a better data exchange format than JSON. This data format is extensible, has rich objects, and is serializable. But it's new, not in wide enough use, and not enough people understand it. I would only recommend this format if the client has very Senior maintainers. 
                  %li Datomic - I think Datomic is ideal as it i) decouples DB functions such as read & write (see here). It also ii) has a flexible schema model, allowing for changes to data structures, as users learn more about the domain. It also iii) has a sound data model based on time and immutability (more faithfully representing data over time) and iv) a logic-based query language (focus on facts). The downside is the specialized knowledge needed to maintain and query the database. But the advantages, and simplicity of the query language, mitigate those tradeoffs. All these other databases are close considerations. But they don't fit the bill due to their specialized nature. Whereas Datomic covers more ground, in terms of leveraging the data. You can see some DB tradeoffs here. 
                  %ul
                    %li not Cassandra - Our app will write to DB, more than it reads. And this is Cassandra's main advantage. Most reads will come from big data stream services (via Storm). 
                    %li not Redis - Good for rapidly changing data sets (but not that much will be needed); but it works best when those data sets all must fit into memory  
                    %li not Neo4j - This is good for graph-style, rich or complex, interconnected data.
                    %li not Couchbase - Good for low-latency and high availability 
                    %li not VoltDB - Good for reacting fast on large amounts of data 


              %h3.secondary-title
                Further

              %h5.slide-content
                %p
                  These technologies are simply a good baseline when considering building out a Rich Internet Application. There are other options, as with the rising popularity of Javascript on all devices. There's <a href="http://nodejs.org/">NodeJS</a> on the server, <a href="http://phonegap.com/">PhoneGap</a> native apps on the mobile device. Tools like <a href="https://github.com/rogerwang/node-webkit">Node-Webkit</a> also allow you to create desktop applications with Javascript. And with <a href="http://tessel.io/">Tessel</a>, we can even use it on our micro-controllers (ie <a href="http://www.arduino.cc/">Arduino</a>).

                %p
                  Beyond tools simply, teams should consider the kinds of language features and architectures appropriate for their needs. Features such as immutable data structures or first class functions (ie closures) offer a lot of benefits and usually be added in as a library or 3rd-party solution. Beyond that, even, techniques like Combinators and Functional Reactive Programming offer better control, albeit with increased abstraction. You can think creatively. I, personally, prefer tools that offer the greatest amount of expressive power. And at the same time optimize my i) developer time (ie. speed to market), ii) production efficiency (it's very lightweight), iii) scalability, and iv) future flexibility. 



        .slide-wrapper#wrapper-introduction
          .slide-container#slide-introduction
            .slide-container-content
              %h1.primary-title
                Introduction
              %h4.slide-content
                %p
                  Interrupt Software is a premier software development boutique. I create and utilise the best tools possible, to identify the problem, craft a solution and distill the technology&apos;s role and interaction.
                %p
                  Interrupt Software offers advanced functionality and design excellence. Technology is more than the context. It has the ability to reimagine behaviour and experience. It connects users with messages and customers with business. And this creates a tremendous amount of business value.
                %p
                  At Interrupt Software, I program as fast as I think. There's a great deal a of value in a well thought out solution. And doing it well leverages your investment for long-term impact.

        .slide-wrapper#wrapper-approach
          .slide-container#slide-approach
            .slide-container-content
              %h1.primary-title
                Approach

              %h4.slide-content
                %p
                  As a Full Stack developer, I see solutions at all levels. Considerations range from user needs to innovation and software craftsmanship.
                %p
                  My skill applies not only to custom building your software. It also creates better solutions, faster, by extracting greater expressive power from my software tools.

              %h3.secondary-title
                Understanding The Problem.

              %h4.slide-content
                %p
                  To break new ground, you have to understand the context. Each business and customer is different. I assess and evaluate all elements so I can effectively conceptualize the most advanced problems.

              %h3.secondary-title
                Choosing My Tools

              %h4.slide-content
                %p
                  My expertise is in knowing what tools to utilise and to what extent. As much utilization as creation, I select best-of-breed tools that enable me to program as fast as I problem solve.

              %h3.secondary-title
                Crafting Impactful Solutions

              %h4.slide-content
                %p
                  I aim to generate business and technological value with the solutions I deliver to you. They have to perform on every level, be as visually stunning as functionally impactful.


        .slide-wrapper#wrapper-services
          .slide-container#slide-services
            .slide-container-content
              %h1.primary-title
                Services

              %h4.slide-content
                I can consult on your project in 3 key areas

              %h3.secondary-title
                System Analysis
              %h4.slide-content
                Helping you define the scope and purpose of your system.

              %h3.secondary-title
                System Design
              %h4.slide-content
                Shaping the experience.

              %h3.secondary-title
                System Implementation
              %h4.slide-content
                Using best-of-breed tools to customize a solution for your needs.

        .slide-wrapper#wrapper-about
          .slide-container#slide-about
            .slide-left-overhang#me-pic
            .slide-container-content
              %h1.primary-title
                About

              %h4.slide-content
                %p
                  Interrupt Software is Timothy Washington
                %p
                  Highly experienced and respected in the digital realm, he is a keen advocate of technology as a world view. He is a senior software developer with over a decade of experience architecting and building custom and enterprise software solutions. Tim is also an avid contributor to the open source community. he is an expert utiliser and visionary. From Lehman Brothers to Conde Nast, his vast portfolio reflects his eclectic expertise, professionalism and passion for his craft and its industry impact.

    .navigation
      .container
        #right-nav
          .nav-item.circle#home
            %span
          .nav-item-label
            home

          .nav-item.circle#blog
          .nav-item-label
            blog

          .nav-item.circle#introduction
          .nav-item-label
            introduction

          .nav-item.circle#approach
          .nav-item-label
            approach

          .nav-item.circle#services
          .nav-item-label
            services

          .nav-item.circle#about
          .nav-item-label
            about

          .nav-item.circle.spacer
          .nav-item-label.spacer
            &nbsp;


          // CV
          .nav-item.squeeze#cv
            .metrouicss
              .icons
                %li
                  .icon-lines
          .nav-item-label.squeeze
            cv

          // Email
          .nav-item.squeeze#email
            .metrouicss
              .icons
                %li
                  .icon-mail
          .nav-item-label.squeeze
            email

          // Twitter
          .nav-item.squeeze#twitter
            .metrouicss
              .icons
                %li
                  .icon-twitter
          .nav-item-label.squeeze
            twitter

          // LinkedIn
          .nav-item.squeeze#linkedin
            .metrouicss
              .icons
                %li
                  .icon-linkedin
          .nav-item-label.squeeze
            linkedIn

          // Github
          .nav-item.squeeze#github
            .metrouicss
              .icons
                %li
                  .icon-github-2
          .nav-item-label.squeeze
            github

    /.footer

    %script( type="text/javascript" src="/include/js/index.js")

